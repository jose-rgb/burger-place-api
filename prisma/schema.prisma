// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  password     String
  phone_number String    @unique
  created_at   DateTime? @default(now())
  updated_at   DateTime? @default(now())
  order        Order[]
  loyalty      loyalty?

  @@map("users")
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String
  image       String
  description String
  price       Float
  created_at  DateTime? @default(now())
  updated_at  DateTime? @default(now())
  orderIDs    String[]  @db.ObjectId
  orders      Order[]   @relation(fields: [orderIDs], references: [id])

  @@map("products")
}

model Order {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime  @default(now())
  address    String
  amount     Int
  total      Float
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  created_at DateTime? @default(now())
  productIDs String[]  @db.ObjectId
  products   Product[] @relation(fields: [productIDs], references: [id])

  @@map("orders")
}

model loyalty {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  accumulated_points Int
  user               User   @relation(fields: [userId], references: [id])
  userId             String @unique @db.ObjectId

  @@map("loyaltys")
}
